#+TITLE:     Haskell
#+AUTHOR:    Philip Yang
#+EMAIL:     phi@cs.umd.edu
#+DATE:      2012-12-15 Sat
#+DESCRIPTION:
#+KEYWORDS:
#+LANGUAGE:  en
#+OPTIONS:   H:3 num:t toc:t \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:t todo:t pri:nil tags:t
#+INFOJS_OPT: view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LINK_UP:   
#+LINK_HOME: 
#+XSLT:

*C-c C-b*: initialze the GHCi, the haskell interpreter in emacs. 
*C-c C-l*: load the source code into GHCi
*M-p*: previous command
 
 http://book.realworldhaskell.org/

 Lazy evaluation. 
 You can define infinitely large data structure, provided you never use all of it. 
 
 Integer:
   pred 1 ==> 0
   succ 1 ==> 2

 Lists: 
   1 : [2, 3] => [1,2,3]
   [1,3,4,5] ++ [6,7] => [1,3,4,5,6,7]
   [1..100] 
   length [1,2,3,4]
   head [1,2,3,4]
   tail [1,2,3,4]
   null []  => True

   String is a list of chars
   "salut" ++ "tout le monde"
   show(2*4) => "8"

 Pairs and n-tuple:
   (1,2)

 List operations
   map (+ 1) [1,2,3,4]  => [2,3,4,5]
   map (< 1) [1,2,3,4]  => [False, False, False, False]
   filter (< 3) [1,2,3,4]  => [1,2]
   foldr (+) 0 [1,2,3,4]  => 10
   foldr (-) 1 [3,5,2] => foldr (+) -1 [3,-5,2] => -1
   foldl (-) 0 [1,2,3,4]  => foldl (+) 0 [-1,-2,-3,-4] => -10

 Source code:
   name: Basics.hs
   Prelude> :l Basics.hs
   *Basics> ...
   

 Function: 
   ((+ 3) . (* 2)) 1  => 5

* Monad
  Closely related to the monads of [[http://en.wikipedia.org/wiki/Category_theory][category theory]]. 
  
